{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (2 \u0441\u0435\u043c\u0435\u0441\u0442\u0440). \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u043b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0433\u0440\u0443\u043f\u043f\u044b \u041a3342 \u041a\u0443\u0437\u043d\u0435\u0446\u043e\u0432 \u0410\u043d\u0434\u0440\u0435\u0439</p>"},{"location":"lab1/lab/","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u043b\u0430\u0441\u044c \u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432 \u0411\u0414 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c JWT \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043e\u043f\u0438\u0441\u0430\u043d \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438, \u0442.\u043a. \u0432\u0441\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0434\u0435\u043b\u0430\u043b\u0438\u0441\u044c \u0443\u0436\u0435 \u043f\u043e \u043c\u043e\u0435\u043c\u0443  \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c\u0443 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443 (\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432). \u041f\u043e \u044d\u0442\u0438\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c \u0432\u044b\u0434\u0435\u043b\u044e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0435\u0442\u0430\u043b\u0438  \u0432\u0441\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b:</p> <ul> <li>\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b Makefile \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0430\u0440\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0438\u0436\u0435:</li> </ul> <pre><code>default: help\n\n.PHONY: help\nhelp: # Show help for each of the Makefile recipes.\n    @grep -E '^[a-zA-Z0-9 -]+:.*#'  Makefile \\\n        | while read -r l; do printf \"\\033[1;32m$$(echo $$l | cut -f 1 -d':')\\033[00m:$$(echo $$l | cut -f 2- -d'#')\\n\"; done\n\n.PHONY: install-local\ninstall-local: # Install all requirements locally.\n    pip install -r requirements.txt\n\n.PHONY: freeze\nfreeze: # Freeze all requirements.\n    pip freeze &gt; requirements.txt\n\n.PHONY: run-local\nrun-local: # Run the app locally.\n     python3 -m src.main\n\n.PHONY: init-migration\ninit-migration: # Create alembic migration.\n    alembic init migrations\n</code></pre> <ul> <li> <p>\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043b\u0438\u043d\u0442\u0435\u0440 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 GitHub Workflows</p> </li> <li> <p>\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 \u043e\u0434\u0438\u043d \u043e\u0431\u0449\u0438\u0439 env \u043a\u043e\u043d\u0444\u0438\u0433, \u0433\u0434\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0435\u0444\u0438\u043a\u0441.  \u0421\u0441\u044b\u043b\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0411\u0414 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438</p> </li> </ul> <pre><code>from pydantic import Field\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass ConfigBase(BaseSettings):\n    model_config = SettingsConfigDict(env_file=\".env\", env_file_encoding=\"utf-8\", extra=\"ignore\")\n\n\nclass UvicornConfig(ConfigBase):\n    model_config = SettingsConfigDict(env_prefix=\"UVICORN_\")\n\n    host: str = Field(\"127.0.0.1\")\n    port: int = Field(8000)\n    workers: int | None = Field(None)\n    log_level: str = Field(\"info\")\n\n\nclass DataBaseConfig(ConfigBase):\n    model_config = SettingsConfigDict(env_prefix=\"DB_\")\n\n    host: str\n    port: int = Field(5432)\n    user: str\n    password: str\n    name: str\n    debug: bool = Field(False)\n\n    @property\n    def url(self) -&gt; str:\n        return f\"postgresql://{self.user}:{self.password}@{self.host}:{self.port}/{self.name}\"\n\n\nclass AuthConfig(ConfigBase):\n    model_config = SettingsConfigDict(env_prefix=\"AUTH_\")\n\n    secret: str\n    alg: str = Field(\"HS256\")\n    ttl: int = Field(360)\n\n\nclass Config(ConfigBase):\n    uvicorn: UvicornConfig = Field(default_factory=UvicornConfig)\n    db: DataBaseConfig = Field(default_factory=DataBaseConfig)\n    auth: AuthConfig = Field(default_factory=AuthConfig)\n\n    @classmethod\n    def load(cls) -&gt; \"Config\":\n        return cls()\n\n\ncfg = Config.load()\n</code></pre> <p>\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 .env \u0444\u0430\u0439\u043b \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>UVICORN_HOST=127.0.0.1\nUVICORN_PORT=8000\nUVICORN_WORKERS=4\nUVICORN_LOG_LEVEL=debug\n\nDB_HOST=localhost\nDB_PORT=5432\nDB_USER=&lt;USER&gt;\nDB_PASSWORD=&lt;PASSWORD&gt;\nDB_NAME=&lt;NAME&gt;\nDB_DEBUG=True\n\nAUTH_SECRET=&lt;SECRET&gt;\nAUTH_ALG=HS256\nAUTH_TTL=360\n</code></pre> <p>\u041f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0411\u0414, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0430 \u0438 \u0442.\u0434. \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d</p> <ul> <li>\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0434\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c</li> </ul> <pre><code>import src.errors as errors\nfrom src.routers import auth, budgets, categories, goals, tags, transactions, users\n\n# === Base Routers ===\n\nrouters = [\n    auth.router,\n    users.router,\n    categories.router,\n    tags.router,\n    transactions.router,\n    budgets.router,\n    goals.router,\n]\n\n# === Errors To Handlers Map ===\n\nexceptions = {\n    errors.NotFoundException: errors.not_found_exception_handler,\n    errors.ValidationException: errors.validation_exception_handler,\n    errors.AuthorizationException: errors.authorization_exception_handler,\n    errors.BadRequestException: errors.bad_request_exception_handler,\n}\n\n\ndef init() -&gt; FastAPI:\n    new_app = FastAPI()\n\n    for router in routers:\n        new_app.include_router(router)\n\n    for exc, handler in exceptions.items():\n        new_app.add_exception_handler(exc, handler)\n\n    return new_app\n</code></pre> <p>\u0422\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438:</p> <pre><code>from sqlmodel import Session, SQLModel, create_engine\n\nfrom src.config import cfg\nfrom src.schemas.users import User\n\nengine = create_engine(cfg.db.url, echo=cfg.db.debug)\n\n\ndef init() -&gt; None:\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session() -&gt; Session:\n    with Session(engine) as session:\n        yield session\n\n\ndef find_user(email: str) -&gt; User | None:\n    with Session(engine) as session:\n        return session.query(User).filter(User.email == email).first()\n</code></pre> <p>\u0410 \u0443\u0436\u0435 \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u0449\u0438\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</p> <pre><code>import uvicorn\n\nfrom src import app, db\nfrom src.config import cfg\n\napp = app.init()\n\nif __name__ == \"__main__\":\n    db.init()\n    uvicorn.run(\n        \"src.main:app\",\n        host=cfg.uvicorn.host,\n        port=cfg.uvicorn.port,\n        workers=cfg.uvicorn.workers,\n        log_level=cfg.uvicorn.log_level,\n        reload=True,\n    )\n</code></pre> <ul> <li>\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u043c\u0438 (\u0438 \u0432\u043e\u043e\u0431\u0449\u0435 \u0441\u043e \u0432\u0441\u0435\u043c\u0438) \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 \u0432\u044b\u043d\u0435\u0441\u0435\u043d\u0430 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b \u0434\u043b\u044f \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 swagger</li> </ul> <pre><code>\nclass AuthorizationException(Exception):\n    status: ClassVar[int] = status.HTTP_401_UNAUTHORIZED\n    detail: str\n\n    def __init__(self, detail: str):\n        self.detail = detail\n\n    def json(self) -&gt; JSONResponse:\n        return JSONResponse(status_code=self.status, content={\"detail\": self.detail})\n\n    @classmethod\n    def response(cls) -&gt; dict[int, dict[str, Any]]:\n        return {\n            cls.status: {\n                \"description\": \"Authorization error\",\n                \"content\": {\"application/json\": {\"example\": {\"detail\": \"string\"}}},\n            }\n        }\n\n# === Errors Handlers ===\n\nasync def authorization_exception_handler(_: Request, exc: AuthorizationException):\n    return exc.json()\n\n\n# === Utils ===\n\n\ndef error_responses(*errors: Type[Exception]) -&gt; dict[int, dict[str, Any]]:\n    responses = {}\n    for error in errors:\n        responses.update(error.response())\n    return responses\n</code></pre> <ul> <li>\u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 sqlmodel (\u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439)</li> </ul> <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel, EmailStr\nfrom sqlmodel import Field, Relationship\n\nfrom src.schemas.base import BaseSQLModel\n\n\nclass UserLogin(BaseModel):\n    email: EmailStr\n    password: str\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass UserDefault(BaseSQLModel):\n    username: str\n    email: EmailStr\n    password: str\n    birth_date: datetime\n\n    @classmethod\n    def custom_validate(cls, birth_date: datetime) -&gt; None:\n        cls.validate_past_data(date=birth_date, field_name=\"birth_date\")\n\n\nclass User(UserDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    created_at: datetime\n\n    categories: list[\"Category\"] = Relationship(back_populates=\"user\")  # noqa: F821\n    tags: list[\"Tag\"] = Relationship(back_populates=\"user\")  # noqa: F821\n    transactions: list[\"Transaction\"] = Relationship(back_populates=\"user\")  # noqa: F821\n    goals: list[\"Goal\"] = Relationship(back_populates=\"user\")  # noqa: F821\n    budgets: list[\"Budget\"] = Relationship(back_populates=\"user\")  # noqa: F821\n\n\nclass UserUpdate(BaseSQLModel):\n    username: str | None = None\n    birth_date: datetime | None = None\n\n    @classmethod\n    def custom_validate(cls, birth_date: datetime) -&gt; None:\n        cls.validate_past_data(date=birth_date, field_name=\"birth_date\")\n</code></pre> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0437\u0430 \u0441\u0447\u0435\u0442 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442 \u043e\u0431\u0449\u0435\u0433\u043e <code>BaseSQLModel</code> \u043a\u043b\u0430\u0441\u0441\u0430 \u0435\u0441\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0443\u0436\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432</p> <pre><code>lass BaseSQLModel(SQLModel):\n\n    @staticmethod\n    def validate_past_data(date: any, field_name: str) -&gt; None:\n        if isinstance(date, datetime):\n            # delete info about Time Zone\n            date = date.replace(tzinfo=None)\n            current_time = datetime.utcnow().replace(tzinfo=None)\n\n            if date &gt; current_time:\n                error = errors.ValidationException(\n                    errors.ValidationExceptionDetail(\n                        loc=[\"body\", field_name],\n                        msg=\"Date should be in the past\",\n                        type=f\"{type(date)}\",\n                    )\n                )\n                raise error\n\n    @staticmethod\n    def validate_future_date(date: any, field_name: str) -&gt; None:\n        if isinstance(date, datetime):\n            # delete info about Time Zone\n            date = date.replace(tzinfo=None)\n            current_time = datetime.utcnow().replace(tzinfo=None)\n\n            if current_time &gt;= date:\n                error = errors.ValidationException(\n                    errors.ValidationExceptionDetail(\n                        loc=[\"body\", field_name],\n                        msg=\"Date should be in the future\",\n                        type=f\"{type(date)}\",\n                    )\n                )\n                raise error\n</code></pre> <ul> <li>\u0435\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0445\u0435\u043d\u0434\u043b\u0435\u0440 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 JWT</li> </ul> <pre><code>import datetime\n\nimport jwt\nfrom fastapi import Security\nfrom fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\nfrom passlib.context import CryptContext\n\nfrom src.config import cfg\nfrom src.db import find_user\nfrom src.errors import AuthorizationException\nfrom src.schemas.users import User\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n    pwd_context = CryptContext(schemes=[\"bcrypt\"])\n    secret = cfg.auth.secret\n\n    def get_password_hash(self, password: str) -&gt; str:\n        return self.pwd_context.hash(password)\n\n    def verify_password(self, pwd: str, hashed_pwd: str) -&gt; bool:\n        return self.pwd_context.verify(pwd, hashed_pwd)\n\n    def encode_token(self, email: str) -&gt; any:\n        payload = {\n            \"exp\": datetime.datetime.utcnow() + datetime.timedelta(seconds=cfg.auth.ttl),\n            \"iat\": datetime.datetime.utcnow(),\n            \"sub\": email,\n        }\n        return jwt.encode(payload, self.secret, algorithm=cfg.auth.alg)\n\n    def decode_token(self, token: str) -&gt; any:\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=[cfg.auth.alg])\n            return payload[\"sub\"]\n        except jwt.ExpiredSignatureError:\n            raise AuthorizationException(detail=\"Expired signature\")\n        except jwt.InvalidTokenError:\n            raise AuthorizationException(detail=\"Invalid token\")\n\n    def get_current_user(self, creds: HTTPAuthorizationCredentials = Security(security)) -&gt; User | None:\n        email = self.decode_token(creds.credentials)\n        if email is None:\n            raise AuthorizationException(detail=\"Could not validate credentials\")\n\n        user = find_user(email)\n        if user is None:\n            raise AuthorizationException(detail=\"User is not found\")\n\n        return user\n\n\nauth = AuthHandler()\n</code></pre> <ul> <li>\u0432\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043a \u0411\u0414 (\u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439) \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 JWT \u0442\u043e\u043a\u0435\u043d\u0430</li> </ul> <pre><code>from fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\nfrom starlette import status\n\nimport src.db as db\nimport src.errors as errors\nfrom src.auth import auth\nfrom src.schemas.base import DELETE_MODEL_RESPONSE\nfrom src.schemas.users import User, UserUpdate\n\nrouter = APIRouter(\n    prefix=\"/users\",\n    tags=[\"Users\"],\n    responses=errors.error_responses(\n        errors.NotFoundException,\n        errors.ValidationException,\n        errors.AuthorizationException,\n    ),\n)\n\n\n@router.get(\"/\", summary=\"Get a list of all users.\", response_model=list[User])\nasync def get_users(\n    skip: int = 0,\n    limit: int = 10,\n    session: Session = Depends(db.get_session),\n    _: User = Depends(auth.get_current_user),\n):\n    users = session.query(User).offset(skip).limit(limit).all()\n    return users\n\n\n@router.get(\"/{user_id}\", summary=\"Get the User by id.\", response_model=User)\nasync def get_user(\n    user_id: int,\n    session: Session = Depends(db.get_session),\n    _: User = Depends(auth.get_current_user),\n):\n    user = session.query(User).filter(User.id == user_id).first()\n\n    if user is None:\n        raise errors.NotFoundException(entity_name=\"User\", entity_id=user_id)\n\n    return user\n\n\n@router.put(\"/{user_id}\", summary=\"Update the User Info by id.\", response_model=User)\nasync def update_user(\n    user_id: int,\n    request: UserUpdate,\n    session: Session = Depends(db.get_session),\n    _: User = Depends(auth.get_current_user),\n):\n    request.custom_validate(birth_date=request.birth_date)\n\n    user = session.query(User).filter(User.id == user_id).first()\n    if user is None:\n        raise errors.NotFoundException(entity_name=\"User\", entity_id=user_id)\n\n    for key, value in request.dict(exclude_unset=True).items():\n        setattr(user, key, value)\n\n    session.commit()\n    session.refresh(user)\n\n    return user\n\n\n@router.delete(\n    \"/{user_id}\",\n    summary=\"Delete the User by id.\",\n    responses={status.HTTP_200_OK: DELETE_MODEL_RESPONSE},\n)\nasync def delete_user(\n    user_id: int,\n    session: Session = Depends(db.get_session),\n    _: User = Depends(auth.get_current_user),\n):\n    user = session.query(User).filter(User.id == user_id).first()\n\n    if user is None:\n        raise errors.NotFoundException(entity_name=\"User\", entity_id=user_id)\n\n    session.delete(user)\n    session.commit()\n\n    return {\"detail\": f\"User with id {user_id} has been deleted.\"}\n</code></pre> <p>\u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043b\u0438\u0441\u0442\u0438\u043d\u0433 \u043f\u043e \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439 (\u043a\u0430\u043a \u0432 \u0440\u0443\u0447\u043a\u0435 \u0434\u043b\u044f \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439). \u041d\u043e \u043f\u043e\u043c\u0438\u043c\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445  CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u0445 \u0435\u0449\u0435 \u0435\u0441\u0442\u044c \u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b</p> <pre><code>@router.get(\n    \"/{transaction_id}/with-category\",\n    summary=\"Get a specific transaction with Category details.\",\n    response_model=TransactionWithCategory,\n)\nasync def get_transaction_with_category(\n    transaction_id: int,\n    session: Session = Depends(db.get_session),\n    _: User = Depends(auth.get_current_user),\n):\n    transaction = session.query(Transaction).filter(Transaction.id == transaction_id).first()\n\n    if not transaction:\n        raise errors.NotFoundException(entity_name=\"Transaction\", entity_id=transaction_id)\n\n    return TransactionWithCategory(\n        id=transaction.id,\n        user_id=transaction.user_id,\n        category_id=transaction.category_id,\n        amount=transaction.amount,\n        date=transaction.date,\n        description=transaction.description,\n        category=transaction.category,\n    )\n</code></pre> <p>\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 swagger \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c</p> <p></p>"},{"location":"lab1/leetcode/","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1 LeetCode","text":"<p>\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u043d\u0438\u0436\u0435</p> <p></p>"},{"location":"lab1/leetcode/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>class Solution:\n    keyboard = {\n        \"2\": \"abc\", \"3\": \"def\", \"4\": \"ghi\", \"5\": \"jkl\",\n        \"6\": \"mno\", \"7\": \"pqrs\", \"8\": \"tuv\", \"9\": \"wxyz\"\n    }\n\n    def letterCombinations(self, digits: str) -&gt; List[str]:\n        if not digits:\n            return []\n\n        res = []\n\n        def backtrack(index, path):\n            if index == len(digits):\n                res.append(\"\".join(path))\n                return\n\n            for char in self.keyboard[digits[index]]:\n                path.append(char)\n                backtrack(index + 1, path)\n                path.pop()\n\n        backtrack(0, [])\n        return res\n</code></pre>"},{"location":"lab1/leetcode/#_2","title":"\u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 backtracking \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u0431\u0443\u043a\u0432 \u043f\u043e \u0446\u0438\u0444\u0440\u0430\u043c. \u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0431\u0443\u043a\u0432\u044b, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0446\u0438\u0444\u0440\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0431\u0443\u043a\u0432\u0443 \u043a \u043f\u0443\u0442\u0438 (path) \u0438  \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0446\u0438\u0444\u0440\u044b. \u041a\u043e\u0433\u0434\u0430 \u043f\u0443\u0442\u044c \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442 \u0434\u043b\u0438\u043d\u044b \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0421\u043b\u043e\u0432\u0430\u0440\u044c keyboard \u0437\u0430\u0434\u0430\u0451\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0446\u0438\u0444\u0440 \u0431\u0443\u043a\u0432\u0430\u043c, \u043a\u0430\u043a \u043d\u0430 \u043a\u043d\u043e\u043f\u043e\u0447\u043d\u043e\u043c \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0435</p>"},{"location":"lab1/practice/","title":"Practice","text":"<p>\u0412\u0441\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0431\u044b\u043b\u0430 \u0441\u0434\u0435\u043b\u0430\u043d\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u043e\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430, \u0447\u0442\u043e \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043b\u0435\u0433\u043a\u043e \u0432 \u0431\u0430\u0437\u0443 \u0432\u0441\u0435\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. </p>"},{"location":"lab1/practice/#1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c mock-\u043e\u0432 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445  \u043d\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\u0445. \u0420\u0430\u0431\u043e\u0442\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 1-\u044b\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u043c.</p> <ul> <li>\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> <li>\u0441\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0431\u0443\u0434\u0443\u0449\u0435\u0439 \u0411\u0414 (\u043d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0443\u0436\u0435 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043b\u0430\u0441\u044c \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043a) </li> <li>\u0441\u0434\u0435\u043b\u0430\u043d \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d \u0434\u043b\u044f \u0431\u0443\u0434\u0443\u0449\u0438\u0445 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 Makefile \u043a\u043e\u043c\u0430\u043d\u0434</li> </ul> <pre><code>default: help\n\n.PHONY: help\nhelp: # Show help for each of the Makefile recipes.\n    @grep -E '^[a-zA-Z0-9 -]+:.*#'  Makefile \\\n        | while read -r l; do printf \"\\033[1;32m$$(echo $$l | cut -f 1 -d':')\\033[00m:$$(echo $$l | cut -f 2- -d'#')\\n\"; done\n\n.PHONY: install-local\ninstall-local: # Install all requirements locally.\n    pip install -r requirements.txt\n\n.PHONY: run-local\nrun-local: # Run the app locally.\n     python3 -m src.main\n</code></pre> <ul> <li>\u0432\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u044b \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 mock-\u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439. \u0422\u0430\u043a \u043a\u0430\u043a \u0432\u043e \u043c\u043d\u043e\u0433\u043e\u043c \u043a\u043e\u0434 \u043f\u043e\u0445\u043e\u0436\u0438\u0439 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u043f\u0440\u0438\u0432\u0435\u0434\u0443 \u0442\u043e\u043b\u044c\u043a\u043e \u043b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\":</li> </ul> <pre><code>from fastapi import APIRouter, Query\nfrom typing import List\nfrom ..schemas.categories import *\n\nimport src.utils.errors as errors\n\nrouter = APIRouter(\n    prefix=\"/categories\",\n    tags=[\"Categories\"],\n    responses=errors.NOT_FOUND_RESPONSE,\n)\n\nfake_categories_db = {}\n\n\n@router.post(\"/\", summary=\"Create a new Category.\", response_model=CategoryResponse)\nasync def create_category(request: CategoryCreateRequest):\n    category_id = len(fake_categories_db) + 1\n    new_category = {\n        \"id\": category_id,\n        \"user_id\": request.user_id,\n        \"name\": request.name,\n        \"type\": request.type,\n    }\n    fake_categories_db[category_id] = new_category\n    return new_category\n\n\n@router.get(\"/{category_id}\", summary=\"Get the Category by id.\", response_model=CategoryResponse)\nasync def get_category(category_id: int):\n    category = fake_categories_db.get(category_id)\n\n    errors.handle_not_found_error(\n        entity_id=category_id,\n        entity_name=\"Category\",\n        entity=category,\n    )\n\n    return category\n\n\n@router.get(\"/\", summary=\"List the Category.\", response_model=List[CategoryResponse])\nasync def list_category(\n        user_id: str | None = Query(None, description=\"Filter by User ID\"),\n        name: str | None = Query(None, description=\"Filter by Category Name\"),\n        cat_type: CategoryType | None = Query(None, description=\"Filter by Category Type\")\n):\n    filtered_categories = []\n    for category in fake_categories_db.values():\n        if user_id and user_id != category[\"user_id\"]:\n            continue\n        if name and name.lower() not in category[\"name\"].lower():\n            continue\n        if cat_type and cat_type != category[\"type\"]:\n            continue\n        filtered_categories.append(category)\n\n    return filtered_categories\n\n\n@router.put(\"/{category_id}\", summary=\"Update the Category by id.\", response_model=CategoryResponse)\nasync def update_category(category_id: int, request: CategoryUpdateRequest):\n    category = fake_categories_db.get(category_id)\n\n    errors.handle_not_found_error(\n        entity_id=category_id,\n        entity_name=\"Category\",\n        entity=category,\n    )\n\n    updated_data = request.model_dump(exclude_unset=True)\n    category.update(updated_data)\n\n    fake_categories_db[category_id] = category\n    return category\n\n\n@router.delete(\"/{category_id}\", summary=\"Delete the Category by id.\")\nasync def delete_user(category_id: int):\n    category = fake_categories_db.get(category_id)\n\n    errors.handle_not_found_error(\n        entity_id=category_id,\n        entity_name=\"Category\",\n        entity=category,\n    )\n\n    del fake_categories_db[category_id]\n    return {}\n</code></pre> <p>\u041f\u043e \u0444\u0430\u043a\u0442\u0443 \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0438 \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0438, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043e\u0434 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c\u0441\u044f.</p>"},{"location":"lab1/practice/#2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041a\u043e\u043c\u043c\u0438\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u0434\u0435\u0441\u044c. \u0418\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435:</p> <ul> <li>\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414</li> <li>\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 ORM \u043a\u0430\u043a FastAPI dependency. \u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 \u0432\u0441\u0435 \u0442\u043e\u0439 \u0436\u0435 \u0433\u0440\u0443\u043f\u043f\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\":</li> </ul> <pre><code>from fastapi import APIRouter, Query, Depends\nfrom sqlalchemy.orm import Session\n\nfrom src.schemas.categories import *\nfrom src.schemas.users import User\nfrom src.schemas.base import DELETE_MODEL_RESPONSE\nimport src.utils.errors as errors\nimport src.db as db\n\nrouter = APIRouter(\n    prefix=\"/categories\",\n    tags=[\"Categories\"],\n    responses=errors.error_responses(\n        errors.NotFoundException, errors.ValidationException,\n    ),\n)\n\n\n@router.post(\"/\", summary=\"Create a new Category.\", response_model=Category)\nasync def create_category(request: CategoryDefault, session: Session = Depends(db.get_session)):\n    request.custom_validate(type=request.type)\n\n    user = session.get(User, request.user_id)\n    if user is None:\n        raise errors.NotFoundException(entity_name=\"User\", entity_id=request.user_id)\n\n    category = Category(**request.dict())\n\n    session.add(category)\n    session.commit()\n    session.refresh(category)\n\n    return category\n\n\n@router.get(\"/{category_id}\", summary=\"Get the Category by id.\", response_model=Category)\nasync def get_category(category_id: int, session: Session = Depends(db.get_session)):\n    category = session.query(Category).filter(Category.id == category_id).first()\n\n    if category is None:\n        raise errors.NotFoundException(entity_name=\"Category\", entity_id=category_id)\n\n    return category\n\n\n@router.get(\"/\", summary=\"List the Category.\", response_model=list[Category])\nasync def list_category(\n        user_id: str | None = Query(None, description=\"Filter by User ID\"),\n        name: str | None = Query(None, description=\"Filter by Category Name\"),\n        cat_type: CategoryType | None = Query(None, description=\"Filter by Category Type\"),\n        session: Session = Depends(db.get_session)\n):\n    query = session.query(Category)\n\n    if user_id:\n        query = query.filter(Category.user_id == user_id)\n    if name:\n        query = query.filter(Category.name.ilike(f\"%{name}%\"))\n    if cat_type:\n        query = query.filter(Category.type == cat_type)\n\n    categories = query.all()\n    return categories\n\n\n@router.put(\"/{category_id}\", summary=\"Update the Category by id.\", response_model=Category)\nasync def update_category(category_id: int, request: CategoryUpdate, session: Session = Depends(db.get_session)):\n    category = session.query(Category).filter(Category.id == category_id).first()\n    if category is None:\n        raise errors.NotFoundException(entity_name=\"Category\", entity_id=category_id)\n\n    for key, value in request.dict(exclude_unset=True).items():\n        setattr(category, key, value)\n\n    session.commit()\n    session.refresh(category)\n\n    return category\n\n\n@router.delete(\"/{category_id}\", summary=\"Delete the Category by id.\", responses={200: DELETE_MODEL_RESPONSE})\nasync def delete_user(category_id: int, session: Session = Depends(db.get_session)):\n    category = session.query(Category).filter(Category.id == category_id).first()\n\n    if category is None:\n        raise errors.NotFoundException(entity_name=\"Category\", entity_id=category_id)\n\n    session.delete(category)\n    session.commit()\n\n    return {\"detail\": f\"Category with id {category_id} has been deleted.\"}\n</code></pre> <ul> <li>\u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u043e\u0434\u0435 \u0434\u043b\u044f \"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\"</li> </ul> <pre><code>from enum import Enum\nfrom sqlmodel import Field, Relationship\nfrom datetime import datetime\nfrom decimal import Decimal\n\nfrom src.schemas.base import BaseSQLModel\n\n\nclass CategoryType(Enum):\n    income = \"income\"\n    expense = \"expense\"\n\n\nclass CategoryDefault(BaseSQLModel):\n    name: str\n    type: CategoryType\n    user_id: int = Field(foreign_key=\"user.id\")\n\n\nclass Category(CategoryDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    user: \"User\" = Relationship(back_populates=\"categories\")\n    transactions: list[\"Transaction\"] = Relationship(back_populates=\"category\")\n    budgets: list[\"Budget\"] = Relationship(back_populates=\"category\")\n\n\nclass CategoryUpdate(BaseSQLModel):\n    name: str | None\n\n\nclass TransactionWithCategory(BaseSQLModel):\n    id: int\n    user_id: int\n    category_id: int\n    amount: Decimal\n    date: datetime\n    description: str | None = None\n    category: Category\n</code></pre> <ul> <li>\u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u044b\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043c\u0435\u0435\u0442 \u0432 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0430\u0442\u044b \u043d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435/\u043f\u0440\u043e\u0448\u043b\u043e\u0435). \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044f\u0441\u044c \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445</li> </ul> <pre><code>from sqlmodel import SQLModel\nfrom enum import Enum\nfrom datetime import datetime\nfrom src.utils import errors\nfrom typing import Any, Type\n\nDELETE_MODEL_RESPONSE = {\n    \"description\": \"User successfully deleted\",\n    \"content\": {\n        \"application/json\": {\n            \"example\": {\"message\": \"string\"}\n        }\n    }\n}\n\n\nclass BaseSQLModel(SQLModel):\n\n    @staticmethod\n    def validate_past_data(date: Any, field_name: str) -&gt; None:\n        if isinstance(date, datetime):\n            # delete info about Time Zone\n            date = date.replace(tzinfo=None)\n            current_time = datetime.utcnow().replace(tzinfo=None)\n\n            if date &gt; current_time:\n                error = errors.ValidationException(\n                    errors.ValidationExceptionDetail(\n                        loc=[\"body\", field_name],\n                        msg=\"Date should be in the past\",\n                        type=f\"{type(date)}\"\n                    )\n                )\n                raise error\n\n    @staticmethod\n    def validate_future_date(date: Any, field_name: str) -&gt; None:\n        if isinstance(date, datetime):\n            # delete info about Time Zone\n            date = date.replace(tzinfo=None)\n            current_time = datetime.utcnow().replace(tzinfo=None)\n\n            if current_time &gt;= date:\n                error = errors.ValidationException(\n                    errors.ValidationExceptionDetail(\n                        loc=[\"body\", field_name],\n                        msg=\"Date should be in the future\",\n                        type=f\"{type(date)}\"\n                    )\n                )\n                raise error\n</code></pre> <ul> <li>\u0432\u043e\u0437\u043d\u0438\u043a\u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0441 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c \u043e\u0448\u0438\u0431\u043e\u043a \u0432 swagger, \u0434\u043b\u044f \u0447\u0435\u0433\u043e \u0432\u0441\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0431\u044b\u043b\u0438 \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044b \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 exceptions \u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b</li> </ul> <pre><code>from fastapi import Request\nfrom fastapi.responses import JSONResponse\n\nfrom pydantic import BaseModel\nfrom typing import Any, ClassVar, List, Union, Type\n\n\n# === Custom Errors ===\n\nclass NotFoundException(Exception):\n    status: ClassVar[int] = 404\n    detail: str\n\n    def __init__(self, entity_name: str, entity_id: int):\n        self.detail = f\"{entity_name} &lt;{entity_id}&gt; not found.\"\n\n    def json(self) -&gt; JSONResponse:\n        return JSONResponse(\n            status_code=self.status,\n            content={\"detail\": self.detail}\n        )\n\n    @classmethod\n    def response(cls) -&gt; dict[int, dict[str, Any]]:\n        return {\n            cls.status: {\n                \"description\": \"Entity not found\",\n                \"content\": {\n                    \"application/json\": {\n                        \"example\": {\"detail\": \"string\"}\n                    }\n                }\n            }\n        }\n\n\nclass ValidationExceptionDetail(BaseModel):\n    loc: List[Union[str, int]]\n    msg: str\n    type: str\n\n\nclass ValidationException(Exception):\n    status: ClassVar[int] = 422\n    detail: ValidationExceptionDetail\n\n    def __init__(self, errors: ValidationExceptionDetail):\n        self.detail = errors\n\n    def json(self) -&gt; JSONResponse:\n        return JSONResponse(\n            status_code=self.status,\n            content={\"detail\": self.detail.dict()}\n        )\n\n    @classmethod\n    def response(cls) -&gt; dict[int, dict[str, Any]]:\n        return {\n            cls.status: {\n                \"description\": \"Validation error\",\n                \"content\": {\n                    \"application/json\": {\n                        \"example\": {\n                            \"detail\": {\n                                \"loc\": [\"body\", \"string\"],\n                                \"msg\": \"string\",\n                                \"type\": \"Type[]\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n# === Errors Handlers ===\n\nasync def validation_exception_handler(_: Request, exc: ValidationException):\n    return exc.json()\n\n\nasync def not_found_exception_handler(_: Request, exc: NotFoundException):\n    return exc.json()\n\n\n# === Utils ===\n\ndef error_responses(*errors: Type[Exception]) -&gt; dict[int, dict[str, Any]]:\n    responses = {}\n    for error in errors:\n        responses.update(error.response())\n    return responses\n</code></pre>"},{"location":"lab1/practice/#3","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 (\u0432\u043e\u0442 \u043a\u043e\u043c\u043c\u0438\u0442) \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0431\u044b\u043b\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439: - \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043c\u043d\u043e\u0433\u043e\u0441\u043e\u0441\u0442\u0430\u0432\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u0442\u0441\u044f \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u0437 env</p> <pre><code>from functools import lru_cache\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\nfrom pydantic import Field\n\n\nclass ConfigBase(BaseSettings):\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"ignore\"\n    )\n\n\nclass UvicornConfig(ConfigBase):\n    model_config = SettingsConfigDict(env_prefix=\"UVICORN_\")\n\n    host: str = Field(\"127.0.0.1\")\n    port: int = Field(8000)\n    workers: int | None = Field(None)\n    log_level: str = Field(\"info\")\n\n\nclass DataBaseConfig(ConfigBase):\n    model_config = SettingsConfigDict(env_prefix=\"DB_\")\n\n    host: str\n    port: int = 5432\n    user: str\n    password: str\n    name: str\n\n    @property\n    def url(self) -&gt; str:\n        return f\"postgresql://{self.user}:{self.password}@{self.host}:{self.port}/{self.name}\"\n\n\nclass Config(ConfigBase):\n    uvicorn: UvicornConfig = Field(default_factory=UvicornConfig)\n    db: DataBaseConfig = Field(default_factory=DataBaseConfig)\n\n    @classmethod\n    def load(cls) -&gt; \"Config\":\n        return cls()\n\n\ncfg = Config.load()\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432 \u043a\u043e\u0434\u0435 \u0431\u0443\u043a\u0432\u0430\u043b\u044c\u043d\u043e \u0442\u0430\u043a:</p> <pre><code>if __name__ == \"__main__\":\n    uvicorn.run(\n        \"src.main:app\",\n        host=cfg.uvicorn.host,\n        port=cfg.uvicorn.port,\n        workers=cfg.uvicorn.workers,\n        log_level=cfg.uvicorn.log_level,\n    )\n</code></pre> <ul> <li>\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d \u0438 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d .gitignore</li> <li>\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043f\u043e \u0438\u0445 \u0437\u0430\u043f\u0443\u0441\u043a\u0443</li> </ul> <pre><code>.PHONY: init-migration\ninit-migration: # Create alembic migration.\n    alembic init migrations\n\n.PHONY: create-migration\ncreate-migration: # Create alembic migration files. Use MESSAGE var to set revision message.\n    @if [ -z \"$(MESSAGE)\" ]; then \\\n        echo \"\u274c MESSAGE is required. Usage: make create-migration MESSAGE='your message here'\"; \\\n        exit 1; \\\n    fi\n    alembic revision --autogenerate -m \"$(MESSAGE)\"\n\n.PHONY: do-migration\ndo-migration: # Apply latest migrations.\n    alembic upgrade head\n\n.PHONY: migrate\nmigrate: # Create and apply migration in one step.\n    @$(MAKE) create-migration MESSAGE=\"$(MESSAGE)\"\n    @$(MAKE) do-migration\n</code></pre>"},{"location":"lab2/leetcode/","title":"Remove Duplicates from Sorted Array II","text":""},{"location":"lab2/leetcode/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<p>\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 \u0434\u0432\u0443\u0445 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439:</p> <ul> <li>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0432\u0430 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f: j \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u0434\u0432\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f.</li> <li>\u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 (\u0438\u043d\u0434\u0435\u043a\u0441\u0430 2) \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c:</li> <li>\u0415\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443, \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044e j \u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c j. </li> <li>\u0415\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0440\u0430\u0432\u0435\u043d \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043b\u0438 \u044d\u0442\u043e\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0431\u043e\u043b\u0435\u0435 \u0434\u0432\u0443\u0445 \u0440\u0430\u0437 \u043f\u043e\u0434\u0440\u044f\u0434. \u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044e j \u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c j.</li> <li>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430.</li> <li></li> </ul>"},{"location":"lab2/leetcode/#_2","title":"\u041a\u043e\u0434 \u0440\u0435\u0448\u0435\u043d\u0438\u044f","text":"<pre><code>class Solution:\n    def removeDuplicates(self, nums: List[int]) -&gt; int:\n        if len(nums) &lt;= 2:\n            return len(nums)\n\n        j = 1\n\n        for i in range(2, len(nums)):\n            if nums[i] != nums[j-1]:\n                j += 1\n                nums[j] = nums[i]\n\n        return j + 1\n</code></pre>"},{"location":"lab2/task1/","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 threads.py / processes.py / courutines.py \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u043d\u0430 \u043b\u043e\u0433\u0438\u043a\u0430: - \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u043e\u0442 1 \u0434\u043e N \u0447\u0438\u0441\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 <code>sum(range(...))</code> - \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0432\u043d\u0443\u0442\u0440\u0438 <code>range</code> \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u0431\u0430\u0442\u0447\u0438 \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u0430\u0442\u0447\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0441\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e (\u0432 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0430\u0445/\u043f\u043e\u0442\u043e\u043a\u0430\u0445/\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445) - \u0432 \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043c\u0435\u0440\u044f\u0435\u043c \u043c\u0435\u0442\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0430\u0442\u0447\u0435\u0439 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430</p>"},{"location":"lab2/task1/#_2","title":"\u041f\u043e\u0442\u043e\u043a\u0438","text":"<pre><code>import threading\nimport time\nimport json\n\n\ndef range_sum(start: int, end: int, result: list[int], index: int) -&gt; None:\n    result[index] = sum(range(start, end))\n\n\ndef big_sum(start: int, end: int, batches: int, result: list[int]) -&gt; None:\n    threads: list[threading.Thread] = []\n    steps_per_batch: int = (end - start) // batches\n\n    for i, batch_start in enumerate(range(start, end, steps_per_batch)):\n        batch_end: int = min(batch_start + steps_per_batch, end)\n        thread: threading.Thread = threading.Thread(\n            target=range_sum,\n            args=(batch_start, batch_end, result, i)\n        )\n        threads.append(thread)\n        thread.start()\n        print(f\"-- Batch {i} is started: summing from {batch_start} to {batch_end}\")\n\n    for i, thread in enumerate(threads):\n        thread.join()\n        print(f\"-- Batch {i} is finished\")\n\n\ndef test() -&gt; None:\n    test_batches: int = 5\n    test_result_list: list[int] = [0] * (test_batches + 1)\n    big_sum(1, 102, test_batches, test_result_list)\n\n    total, expected = sum(test_result_list), sum(range(1, 102))\n    assert total == expected, f\"Expected {expected}, got {total}\"\n\n\nif __name__ == \"__main__\":\n    test()\n\n    start_sum, end_sum, batches = 1, 1_000_000_000, 100\n    print(f\"Starting sum from {start_sum} to {end_sum} in {batches} batches...\")\n\n    result_list: list[int] = [0] * batches\n    start_time = time.time()\n    big_sum(start_sum, end_sum + 1, batches, result_list)\n    end_time = time.time()\n\n    data: dict = {\n        \"batches\": batches,\n        \"result\": sum(result_list),\n        \"duration_seconds\": end_time - start_time\n    }\n\n    with open(\"threads.json\", \"w\") as f:\n        json.dump(data, f, indent=2)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</p> <pre><code>{\n  \"batches\": 100,\n  \"result\": 500000000500000000,\n  \"duration_seconds\": 7.881979942321777\n}\n</code></pre>"},{"location":"lab2/task1/#_3","title":"\u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b","text":"<pre><code>import multiprocessing\nimport time\nimport json\nimport os\n\n\ndef range_sum(args: tuple[int, int, int]) -&gt; int:\n    index, start, end = args\n    print(f\"-- Batch {index} started: summing from {start} to {end}\")\n    result = sum(range(start, end))\n    print(f\"-- Batch {index} finished\")\n    return result\n\n\ndef big_sum(start: int, end: int, batches: int) -&gt; int:\n    steps_per_batch = (end - start) // batches\n    ranges = [\n        (i // steps_per_batch, i, min(i + steps_per_batch, end))\n        for i in range(start, end, steps_per_batch)\n    ]\n\n    with multiprocessing.Pool(processes=batches) as pool:\n        results = pool.map(range_sum, ranges)\n\n    return sum(results)\n\n\ndef test() -&gt; None:\n    test_batches = os.cpu_count()\n    total, expected = big_sum(1, 102, test_batches), sum(range(1, 102))\n    assert total == expected, f\"Expected {expected}, got {total}\"\n\n\nif __name__ == \"__main__\":\n    test()\n\n    start_sum, end_sum = 1, 1_000_000_000\n    batches = os.cpu_count()\n    print(f\"Starting sum from {start_sum} to {end_sum} in {batches} batches...\")\n\n    start_time = time.time()\n    result: int = big_sum(start_sum, end_sum + 1, batches)\n    end_time = time.time()\n\n    data: dict = {\n        \"batches\": batches,\n        \"result\": result,\n        \"duration_seconds\": end_time - start_time\n    }\n\n    with open(\"processes.json\", \"w\") as f:\n        json.dump(data, f, indent=2)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</p> <pre><code>{\n  \"batches\": 8,\n  \"result\": 500000000500000000,\n  \"duration_seconds\": 1.4063470363616943\n}\n</code></pre>"},{"location":"lab2/task1/#_4","title":"\u041a\u043e\u0440\u0443\u0442\u0438\u043d\u044b","text":"<pre><code>import asyncio\nimport time\nimport json\n\n\nasync def range_sum(args: tuple[int, int, int]) -&gt; int:\n    index, start, end = args\n    print(f\"-- Batch {index} started: summing from {start} to {end}\")\n    result = sum(range(start, end))\n    print(f\"-- Batch {index} finished\")\n    return result\n\n\nasync def big_sum(start: int, end: int, batches: int) -&gt; int:\n    steps_per_batch = (end - start) // batches\n    ranges = [\n        (i // steps_per_batch, i, min(i + steps_per_batch, end))\n        for i in range(start, end, steps_per_batch)\n    ]\n\n    results = await asyncio.gather(*(range_sum(args) for args in ranges))\n    return sum(results)\n\n\ndef test() -&gt; None:\n    test_batches = 5\n    total, expected = asyncio.run(big_sum(1, 102, test_batches)), sum(range(1, 102))\n    assert total == expected, f\"Expected {expected}, got {total}\"\n\n\nif __name__ == \"__main__\":\n    test()\n\n    start_sum, end_sum, batches = 1, 1_000_000_000, 20_000\n    print(f\"Starting threaded sum from {start_sum} to {end_sum} in {batches} batches...\")\n\n    start_time = time.time()\n    result = asyncio.run(big_sum(start_sum, end_sum + 1, batches))\n    end_time = time.time()\n\n    data: dict = {\n        \"batches\": batches,\n        \"result\": result,\n        \"duration_seconds\": end_time - start_time\n    }\n\n    with open(\"coroutines.json\", \"w\") as f:\n        json.dump(data, f, indent=2)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</p> <pre><code>{\n  \"batches\": 20000,\n  \"result\": 500000000500000000,\n  \"duration_seconds\": 8.07617712020874\n}\n</code></pre>"},{"location":"lab2/task1/#_5","title":"\u0418\u0442\u043e\u0433\u043e","text":"\u041c\u0435\u0442\u043e\u0434 \u0411\u0430\u0442\u0447\u0438 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441) \u041a\u043e\u0440\u0443\u0442\u0438\u043d\u044b 20000 500000000500000000 8.07617712020874 \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b 8 500000000500000000 1.4063470363616943 \u041f\u043e\u0442\u043e\u043a\u0438 100 500000000500000000 7.881979942321777 <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430 1.41 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0430\u043a\u0435\u0442\u043e\u0432. \u041a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f  \u043f\u0440\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0430\u0442\u0447\u0435\u0439 =&gt; \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u0434\u0435\u043b\u0430\u0435\u043c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0435 \u044f\u0434\u0440\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b,  \u043a\u043e\u0433\u0434\u0430 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0430\u043c\u0438 \u043d\u0430 \u043e\u0434\u043d\u043e \u044f\u0434\u0440\u043e + \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 Python \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0430\u043c\u0438 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430 </p>"},{"location":"lab2/task2/","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0438\u0448\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0435\u0440. \u0411\u0443\u0434\u0435\u043c \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u044b \u043d\u0430 \u0442\u0435\u043c\u0443 \u0444\u0438\u043d\u0430\u043d\u0441\u044b \u0441 <code>https://vc.ru/money</code>. \u0421\u0430\u0439\u0442 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432 \u043e\u0434\u043d\u0443 \u043b\u0435\u043d\u0442\u0443 \u0432\u0441\u0435 \u043f\u043e\u0441\u0442\u044b \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 =&gt; \u043d\u0443\u0436\u043d\u043e \u0438\u043c\u0438\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u043a\u0440\u0443\u0442\u043a\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b,  \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u043c \u0447\u0435\u0440\u0435\u0437 <code>selenium</code>. \u041f\u0430\u0440\u0441\u0435\u0440 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a:</p> <pre><code>import json\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom bs4 import BeautifulSoup\n\n\ndef fetch_vc_money_posts_selenium(desired_count=30, url=\"https://vc.ru/money\"):\n    options = Options()\n    options.add_argument(\"--headless\")\n    options.add_argument(\"--disable-gpu\")\n    options.add_argument(\"--no-sandbox\")\n\n    driver = webdriver.Chrome(options=options)\n    driver.get(url)\n\n    SCROLL_PAUSE = 2\n    posts_seen = set()\n    posts = []\n\n    last_height = driver.execute_script(\"return document.body.scrollHeight\")\n\n    while len(posts) &lt; desired_count:\n        driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n        time.sleep(SCROLL_PAUSE)\n\n        new_height = driver.execute_script(\"return document.body.scrollHeight\")\n        if new_height == last_height:\n            break\n        last_height = new_height\n\n        soup = BeautifulSoup(driver.page_source, \"html.parser\")\n        for post in soup.find_all(\"div\", class_=\"content content--short\"):\n            title_tag = post.find(\"div\", class_=\"content-title\")\n            link_tag = post.find(\"a\", class_=\"content__link\")\n            if title_tag and link_tag:\n                title = title_tag.get_text(strip=True)\n                link = \"https://vc.ru\" + link_tag[\"href\"]\n                if link not in posts_seen:\n                    posts_seen.add(link)\n                    print(f\"-- Post #{len(posts)+1} added\")\n                    posts.append({\"title\": title, \"link\": link})\n\n        if len(posts) &gt;= desired_count:\n            break\n\n    driver.quit()\n    return posts[:desired_count]\n\n\nif __name__ == \"__main__\":\n    data = fetch_vc_money_posts_selenium(desired_count=400)\n\n    with open(\"vc_money_posts.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f, ensure_ascii=False, indent=2)\n\n    print(f\"Saved {len(data)} posts to vc_money_posts.json\")\n</code></pre> <p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0432\u0441\u0435 \u043f\u043e\u0441\u0442\u044b N \u0448\u0442\u0443\u043a (\u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 400 \u0441\u0441\u044b\u043b\u043e\u043a), \u0437\u0430\u043d\u043e\u0441\u0438\u043c \u0432\u0441\u0435 \u0432 json,  \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0435 \u0438 \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0432\u0435\u0437\u0434\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0441\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e</p>"},{"location":"lab2/task2/#_2","title":"\u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b","text":"<pre><code>import json\nimport time\nimport math\nimport multiprocessing as mp\nimport requests\nfrom bs4 import BeautifulSoup\n\n\ndef fetch_post_details(url: str) -&gt; dict:\n    headers = {\n        \"User-Agent\": (\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n            \"AppleWebKit/537.36 (KHTML, like Gecko) \"\n            \"Chrome/113.0.0.0 Safari/537.36\"\n        )\n    }\n    result = {\"link\": url, \"title\": None, \"text\": None}\n    try:\n        resp = requests.get(url, headers=headers, timeout=10)\n        resp.raise_for_status()\n    except requests.RequestException as e:\n        result[\"error\"] = f\"Request failed: {e}\"\n        return result\n\n    soup = BeautifulSoup(resp.text, \"html.parser\")\n    title_tag = soup.select_one(\"h1.content-title, div.content-title\")\n    if title_tag:\n        result[\"title\"] = title_tag.get_text(strip=True)\n\n    paragraphs = soup.select(\"article.content__blocks p\")\n    text_blocks = [p.get_text(strip=True) for p in paragraphs if p.get_text(strip=True)]\n    result[\"text\"] = \"\\n\\n\".join(text_blocks)\n    return result\n\n\ndef worker_chunk(chunk):\n    return [fetch_post_details(item[\"link\"]) for item in chunk]\n\n\nif __name__ == \"__main__\":\n    with open(\"vc_money_posts.json\", \"r\", encoding=\"utf-8\") as f:\n        posts = json.load(f)\n\n    cpu_count = mp.cpu_count()\n    total = len(posts)\n\n    chunk_size = math.ceil(total / cpu_count)\n    chunks = [posts[i:i + chunk_size] for i in range(0, total, chunk_size)]\n\n    start_time = time.time()\n    with mp.Pool(processes=cpu_count) as pool:\n        results_per_chunk = pool.map(worker_chunk, chunks)\n\n    elapsed = time.time() - start_time\n    detailed_posts = [item for sublist in results_per_chunk for item in sublist]\n\n    output_data = {\n        \"meta\": {\n            \"duration_seconds\": round(elapsed, 2),\n            \"batches\": cpu_count\n        },\n        \"posts\": detailed_posts\n    }\n\n    with open(\"processes.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(output_data, f, ensure_ascii=False, indent=2)\n\n    print(f\"Done: parsed {len(detailed_posts)} posts in {round(elapsed, 2)}s \"\n          f\"using {cpu_count} processes\")\n</code></pre>"},{"location":"lab2/task2/#_3","title":"\u041f\u043e\u0442\u043e\u043a\u0438","text":"<pre><code>import json\nimport threading\nimport time\nimport requests\nfrom bs4 import BeautifulSoup\n\n\ndef fetch_post_details(url: str) -&gt; dict:\n    headers = {\n        \"User-Agent\": (\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n            \"AppleWebKit/537.36 (KHTML, like Gecko) \"\n            \"Chrome/113.0.0.0 Safari/537.36\"\n        )\n    }\n    result = {\"link\": url, \"title\": None, \"text\": None}\n\n    try:\n        resp = requests.get(url, headers=headers, timeout=10)\n        resp.raise_for_status()\n    except requests.RequestException as e:\n        result[\"error\"] = f\"Request failed: {e}\"\n        return result\n\n    soup = BeautifulSoup(resp.text, \"html.parser\")\n    title_tag = soup.select_one(\"h1.content-title, div.content-title\")\n    if title_tag:\n        result[\"title\"] = title_tag.get_text(strip=True)\n\n    paragraphs = soup.select(\"article.content__blocks p\")\n    text_blocks = [p.get_text(strip=True) for p in paragraphs if p.get_text(strip=True)]\n    result[\"text\"] = \"\\n\\n\".join(text_blocks)\n\n    return result\n\n\ndef worker(idx: int, total: int, url: str, output: list, lock: threading.Lock):\n    print(f\"[{idx}/{total}] Fetching: {url}\")\n    details = fetch_post_details(url)\n    with lock:\n        output.append(details)\n\n\nif __name__ == \"__main__\":\n    with open(\"vc_money_posts.json\", \"r\", encoding=\"utf-8\") as f:\n        posts = json.load(f)\n\n    detailed_posts = []\n    lock = threading.Lock()\n    threads = []\n\n    total = len(posts)\n    start_time = time.time()\n\n    for idx, post in enumerate(posts, start=1):\n        url = post.get(\"link\")\n        t = threading.Thread(\n            target=worker,\n            args=(idx, total, url, detailed_posts, lock),\n            daemon=True\n        )\n        t.start()\n        threads.append(t)\n\n    for t in threads:\n        t.join()\n\n    elapsed = time.time() - start_time\n    batch_count = len(threads)\n\n    output_data = {\n        \"meta\": {\n            \"duration_seconds\": round(elapsed, 2),\n            \"batches\": batch_count\n        },\n        \"posts\": detailed_posts\n    }\n\n    with open(\"threads.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(output_data, f, ensure_ascii=False, indent=2)\n\n    print(f\"Done: parsed {len(detailed_posts)} posts in {round(elapsed,2)}s using {batch_count} threads\")\n</code></pre>"},{"location":"lab2/task2/#_4","title":"\u041a\u043e\u0440\u0443\u0442\u0438\u043d\u044b","text":"<pre><code>import json\nimport asyncio\nimport time\nfrom aiohttp import ClientSession, ClientTimeout\nfrom bs4 import BeautifulSoup\n\nMAX_CONCURRENT = 500\n\n\nasync def fetch_post_details(session: ClientSession, url: str) -&gt; dict:\n    headers = {\n        \"User-Agent\": (\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n            \"AppleWebKit/537.36 (KHTML, like Gecko) \"\n            \"Chrome/113.0.0.0 Safari/537.36\"\n        )\n    }\n    result = {\"link\": url, \"title\": None, \"text\": None}\n    try:\n        async with session.get(url, headers=headers) as resp:\n            resp.raise_for_status()\n            html = await resp.text()\n    except Exception as e:\n        result[\"error\"] = f\"Request failed: {e}\"\n        return result\n\n    soup = BeautifulSoup(html, \"html.parser\")\n    title_tag = soup.select_one(\"h1.content-title, div.content-title\")\n    if title_tag:\n        result[\"title\"] = title_tag.get_text(strip=True)\n\n    paragraphs = soup.select(\"article.content__blocks p\")\n    text_blocks = [p.get_text(strip=True) for p in paragraphs if p.get_text(strip=True)]\n    result[\"text\"] = \"\\n\\n\".join(text_blocks)\n    return result\n\n\nasync def bound_fetch(semaphore, session, idx, total, url, output):\n    async with semaphore:\n        print(f\"[{idx}/{total}] Fetching: {url}\")\n        details = await fetch_post_details(session, url)\n        output.append(details)\n\n\nasync def main():\n    with open(\"vc_money_posts.json\", \"r\", encoding=\"utf-8\") as f:\n        posts = json.load(f)\n\n    total = len(posts)\n    semaphore = asyncio.Semaphore(MAX_CONCURRENT)\n    detailed_posts = []\n    timeout = ClientTimeout(total=60)\n\n    start = time.monotonic()\n    async with ClientSession(timeout=timeout) as session:\n        tasks = []\n        for idx, post in enumerate(posts, start=1):\n            url = post.get(\"link\")\n            tasks.append(\n                asyncio.create_task(\n                    bound_fetch(semaphore, session, idx, total, url, detailed_posts)\n                )\n            )\n        await asyncio.gather(*tasks)\n    elapsed = time.monotonic() - start\n\n    output_data = {\n        \"meta\": {\n            \"duration_seconds\": round(elapsed, 2),\n            \"batches\": total\n        },\n        \"posts\": detailed_posts\n    }\n    with open(\"coroutines.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(output_data, f, ensure_ascii=False, indent=2)\n\n    print(f\"Done: parsed {len(detailed_posts)} posts in {round(elapsed,2)}s using concurrency={MAX_CONCURRENT}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"lab2/task2/#_5","title":"\u0418\u0442\u043e\u0433\u043e","text":"\u041c\u0435\u0442\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441) \u0411\u0430\u0442\u0447\u0438 \u041a\u043e\u0440\u0443\u0442\u0438\u043d 1.4 400 \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b 37.45 8 \u041f\u043e\u0442\u043e\u043a\u0438 1.71 400 <p>\u041a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u0438 \u043f\u043e\u0442\u043e\u043a\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u0435\u0435 \u0431\u044b\u0441\u0442\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u0447\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 1.4 \u0438 1.71 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.  \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438, \u0437\u0430\u043d\u0438\u043c\u0430\u044f 37.45 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u043f\u0440\u0438 \u043c\u0430\u043b\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u043a\u0435\u0442\u043e\u0432. \u0412 \u0446\u0435\u043b\u043e\u043c, \u0443\u0431\u0435\u0436\u0434\u0430\u0435\u043c\u0441\u044f, \u0447\u0442\u043e I/O-bound \u0437\u0430\u0434\u0430\u0447\u0438 \u043b\u0443\u0447\u0448\u0435 \u0440\u0435\u0448\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u0442\u043e\u043a\u0438/\u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u043d\u0435\u0436\u0435\u043b\u0438 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0442\u0430\u043a: - \u043f\u043e\u0442\u043e\u043a\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 input/output \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 - \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u0434\u043b\u044f \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 - \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 </p>"},{"location":"lab3/task/","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u0412 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043c\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u043b\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u043b\u0438 \u0435\u0433\u043e \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b (Parser, PostgreSQL, Redis/Celery, Grafana/Prometheus) \u0432 Docker-\u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 Parser-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0437\u0430\u0434\u0430\u0447. \u0412 \u043e\u0442\u0447\u0451\u0442\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0438\u0434\u0435\u0438.</p>"},{"location":"lab3/task/#pydantic-settings","title":"\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Pydantic Settings","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (<code>src/config.py</code>) \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0430 \u0447\u0435\u0440\u0435\u0437 <code>pydantic_settings.BaseSettings</code>. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 (Uvicorn, \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, Auth, Parser, Prometheus) \u0441\u043e\u0437\u0434\u0430\u043d \u0441\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441-\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430, \u0447\u0438\u0442\u0430\u044e\u0449\u0438\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 <code>.env</code>. \u041a\u043b\u0430\u0441\u0441 <code>ParserConfig</code> \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043f\u0440\u0435\u0444\u0438\u043a\u0441 <code>PARSER_</code> \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:</p> <pre><code>class ParserConfig(BaseSettings):\n    model_config = SettingsConfigDict(env_prefix=\"PARSER_\")\n\n    enabled: bool\n    parser_url: str\n    celery_broker_url: str\n    celery_backend_url: str\n</code></pre> <p>\u041f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 <code>cfg = Config.load()</code> \u0432\u0441\u0435 \u044d\u0442\u0438 \u043f\u043e\u043b\u044f \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438. \u0412 <code>main</code> \u0438 \u0432 \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f <code>cfg.parser.enabled</code>, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 Parser-\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d.</p>"},{"location":"lab3/task/#parser-dockerfile","title":"Parser-\u0441\u0435\u0440\u0432\u0438\u0441 \u0438 Dockerfile","text":"<p>Parser \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435 <code>parser/</code>. \u0412 \u0444\u0430\u0439\u043b\u0435 <code>parser/main.py</code> \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d \u0440\u043e\u0443\u0442\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 GET-\u0437\u0430\u043f\u0440\u043e\u0441 <code>/parse?count=&lt;n&gt;</code>, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0435\u0433\u043e (\u0441\u0431\u043e\u0440 \u0441\u0441\u044b\u043b\u043e\u043a \u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 JSON \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439:</p> <pre><code>{\n  \"meta\": { \"parsed\": 10, \"duration_seconds\": 0.23 },\n  \"posts\": [\n    { \"title\": \"Post1\", \"link\": \"https://...\", \"text\": \"...\", \"error\": null },\n    ...\n  ]\n}\n</code></pre> <p>Dockerfile \u0434\u043b\u044f Parser-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 (<code>parser/Dockerfile</code>) \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 <code>python:3.11-slim</code>, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f <code>chromium-driver</code> \u0438 \u0432\u0441\u0451 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0435\u0440\u0430) \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 <code>uvicorn parser.main:app --host 0.0.0.0 --port 8080</code>.</p> <pre><code>FROM python:3.11-slim\nRUN apt-get update &amp;&amp; apt-get install -y curl unzip gnupg chromium-driver \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\nWORKDIR /app\nCOPY parser/requirements.txt ./parser/requirements.txt\nRUN pip install --no-cache-dir -r parser/requirements.txt\nCOPY parser/ ./parser/\nEXPOSE 8080\nCMD [\"uvicorn\", \"parser.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n</code></pre>"},{"location":"lab3/task/#celery-redis","title":"Celery + Redis: \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u044c","text":"<p>\u0414\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0431\u044b\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d Celery-\u0442\u0430\u0440\u0433\u0435\u0442 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 Redis-\u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c. \u0424\u0430\u0439\u043b <code>src/celery.py</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e Celery \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 <code>parse_url_task</code>:</p> <pre><code>from celery import Celery\nimport requests\nimport src.errors as errors\nfrom src.config import cfg\n\ncelery_app = Celery(\n    \"worker\",\n    broker=cfg.parser.celery_broker_url,\n    backend=cfg.parser.celery_backend_url\n)\n\n@celery_app.task(bind=True)\ndef parse_url_task(self, count: int) -&gt; dict:\n    try:\n        url = f\"{cfg.parser.parser_url}/parse\"\n        response = requests.get(url, params={\"count\": count}, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.RequestException as e:\n        raise errors.BadRequestException(detail=f\"Request error: {e}\")\n    except ValueError:\n        raise errors.BadRequestException(detail=\"Invalid JSON from parser\")\n</code></pre> <ul> <li><code>bind=True</code> \u0434\u0430\u0451\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a <code>self.request.id</code> \u0438 <code>self.retry()</code>.</li> <li>\u0412\u043d\u0443\u0442\u0440\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c\u0443 Parser-\u0441\u0435\u0440\u0432\u0438\u0441\u0443, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f JSON \u043b\u0438\u0431\u043e \u0431\u0440\u043e\u0441\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430.</li> </ul>"},{"location":"lab3/task/#fastapi-parser","title":"FastAPI-\u0440\u043e\u0443\u0442\u0435\u0440 \u0434\u043b\u044f Parser","text":"<p>\u0412 <code>src/routers/parser.py</code> \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u0432\u0430 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430, \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u044b\u0435 JWT-\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 (\u0447\u0435\u0440\u0435\u0437 <code>Depends(auth.get_current_user)</code>), \u0438 \u043e\u0431\u0432\u044f\u0437\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432:</p> <pre><code>from fastapi import APIRouter, Depends\nfrom celery.result import AsyncResult\nfrom pydantic import BaseModel\nfrom typing import Optional\n\nimport src.errors as errors\nfrom src.auth import auth\nfrom src.celery import celery_app, parse_url_task\nfrom src.config import cfg\nfrom src.schemas.parser import ParseResult\n\nrouter = APIRouter(\n    prefix=\"/parser\",\n    tags=[\"Parser\"],\n    responses=errors.error_responses(\n        errors.BadRequestException,\n        errors.AuthorizationException\n    ),\n)\n\nclass ParseRequest(BaseModel):\n    count: int\n\nclass TaskStatusResponse(BaseModel):\n    task_id: str\n    status: str\n    result: Optional[ParseResult] = None\n\n@router.post(\"/parse\")\ndef start_parsing(req: ParseRequest, _=Depends(auth.get_current_user)):\n    if not cfg.parser.enabled:\n        raise errors.BadRequestException(detail=\"Parser is disabled\")\n    task = parse_url_task.delay(req.count)\n    return {\"task_id\": task.id, \"message\": \"Parsing started\"}\n\n@router.get(\"/task/{task_id}\", response_model=TaskStatusResponse)\ndef get_task_status(task_id: str, _=Depends(auth.get_current_user)):\n    if not cfg.parser.enabled:\n        raise errors.BadRequestException(detail=\"Parser is disabled\")\n\n    result = AsyncResult(task_id, app=celery_app)\n    if result.failed():\n        exc = result.result\n        if isinstance(exc, errors.BadRequestException):\n            raise errors.BadRequestException(detail=exc.detail)\n        raise errors.BadRequestException(detail=\"Unknown error in parsing task\")\n\n    payload = None\n    if result.successful():\n        payload = ParseResult.parse_obj(result.result)\n    return TaskStatusResponse(task_id=task_id, status=result.status, result=payload)\n</code></pre> <ul> <li><code>ParseResult</code> \u043e\u043f\u0438\u0441\u0430\u043d \u0432 <code>src/schemas/parser.py</code> \u043a\u0430\u043a Pydantic-\u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 <code>meta</code> \u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u043c <code>posts</code>.</li> <li>\u041f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0444\u043e\u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0433\u043e\u0442\u043e\u0432\u044b\u0439 JSON \u0438\u0437 Parser-\u0441\u0435\u0440\u0432\u0438\u0441\u0430.</li> </ul>"},{"location":"lab3/task/#docker-compose","title":"Docker Compose: \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432","text":"<p>\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 <code>docker-compose.yml</code> (\u0444\u0430\u0439\u043b <code>deploy/docker/docker-compose.yaml</code>) \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0448\u0435\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432:</p> <ul> <li>web: \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 FastAPI (\u0441\u043b\u0443\u0436\u0438\u0442 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Postgres, Celery)</li> <li>parser: \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 (\u043f\u043e\u0440\u0442 8080)</li> <li>postgres: \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL (\u043f\u043e\u0440\u0442 5432)</li> <li>redis: \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0434\u043b\u044f Celery (\u043f\u043e\u0440\u0442 6379)</li> <li>celery_worker: \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 Celery-\u0432\u043e\u0440\u043a\u0435\u0440\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c</li> <li>prometheus, grafana: \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 (\u043f\u043e\u0440\u0442 9090 \u0438 3000)</li> </ul> <p>\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b <code>docker-compose.yml</code> (\u0441\u043e\u043a\u0440\u0430\u0449\u0451\u043d\u043d\u044b\u0439 \u0432\u0438\u0434):</p> <pre><code>services:\n  web:\n    build: ../../\n    ports:\n      - \"8000:8000\"\n    env_file:\n      - ../../.env\n    environment:\n      UVICORN_HOST: \"0.0.0.0\"\n      DB_HOST: \"postgres\"\n      DB_PASSWORD: \"12345\"\n      PARSER_ENABLED: \"true\"\n      PARSER_PARSER_URL: \"http://parser:8080\"\n      PARSER_CELERY_BROKER_URL: \"redis://redis:6379/0\"\n      PARSER_CELERY_BACKEND_URL: \"redis://redis:6379/0\"\n    depends_on:\n      - postgres\n      - redis\n      - parser\n\n  parser:\n    build:\n      context: ../../\n      dockerfile: ./parser/Dockerfile\n    ports:\n      - \"8080:8080\"\n    environment:\n      ENV: \"DOCKER\"\n    depends_on:\n      - prometheus\n\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_USER: \"kdduha\"\n      POSTGRES_PASSWORD: \"12345\"\n      POSTGRES_DB: \"fastapi_db\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n\n  celery_worker:\n    build: ../../\n    working_dir: /usr/app/src\n    command: celery -A celery:celery_app worker --loglevel=info\n    env_file:\n      - ../../.env\n    environment:\n      PARSER_ENABLED: \"true\"\n      PARSER_PARSER_URL: \"http://parser:8080\"\n      PARSER_CELERY_BROKER_URL: \"redis://redis:6379/0\"\n      PARSER_CELERY_BACKEND_URL: \"redis://redis:6379/0\"\n    depends_on:\n      - redis\n      - parser\n\n  prometheus:\n    image: prom/prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ../../deploy/docker/prometheus.yaml:/etc/prometheus/prometheus.yaml\n\n  grafana:\n    image: grafana/grafana\n    ports:\n      - \"3000:3000\"\n\nvolumes:\n  postgres_data:\n  grafana_data:\n</code></pre>"}]}